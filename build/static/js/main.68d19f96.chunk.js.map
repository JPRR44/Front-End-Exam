{"version":3,"sources":["components/register/register.js","components/navbar/navbar.js","components/hometext/hometext.js","containers/userDashboard/userDashboard.js","containers/Home/Home.js","components/Login/Login.js","containers/LoginForm/LoginCon.js","components/logintext/logintext.js","containers/LoginScreen/LoginScreen.js","App.js","serviceWorker.js","index.js"],"names":["RegisterForm","Container","id","style","backgroundColor","Form","Row","Col","FormGroup","Label","for","Input","type","name","placeholder","Button","color","Navbar","Nav","defaultActiveKey","as","Item","Link","href","marginLeft","to","HomeText","height","width","UserDashboard","useState","Users","setUsers","useEffect","fetch","then","res","json","data","catch","err","console","log","map","user","key","email","Home","setlogged","logged","backgroundSize","display","maxWidth","margin","justifyContent","alignItems","withRouter","setLogged","history","setemail","psw","setpsw","marginTop","value","onChange","e","target","onClick","body","password","headers","method","JSON","stringify","push","alert","LoginText","LoginScreen","Component","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.68d19f96.chunk.js","sourcesContent":["import React from 'react';\nimport './register.css';\n\nimport { Button, Form, FormGroup, Label, Input, Container, Row, Col } from 'reactstrap';\n\nconst RegisterForm = () => {\n    return(\n                    <Container id = \"containerRegister\" style={{backgroundColor: \"#f8f8f8\"}}>\n                        <Form id = \"formRegister\">\n                            <h1 id = \"h1Register\">Register</h1>\n                            <hr id = \"hrRegister\"/>\n                            <Row id = \"rowNames\">\n                                <Col>\n                                    <FormGroup>\n                                        <Label for=\"firstName\">Fist Name</Label>\n                                        <Input type=\"text\" name=\"firstName\" id=\"firstName\" placeholder=\"Enter your first name\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col>\n                                    <FormGroup>\n                                        <Label for=\"lastName\">Last Name</Label>\n                                        <Input type=\"text\" name=\"lastName\" id=\"lastName\" placeholder=\"Enter your last name\" />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                            <Col>\n                                    <FormGroup>\n                                        <Label for=\"Email\">Email</Label>\n                                        <Input type=\"email\" name=\"Email\" id=\"Email\" placeholder=\"Enter your Email\" />\n                                    </FormGroup>\n                            </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <FormGroup>\n                                        <Label for=\"password\">Password</Label>\n                                        <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Enter your password\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col>\n                                    <FormGroup>\n                                        <Label for=\"confirmPassword\">Confirm Password</Label>\n                                        <Input type=\"password\" name=\"confirmPassword\" id=\"confirmPassword\" placeholder=\"Confirm your password\" />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col>\n                                    <Button color = \"primary\" id = \"buttonRegister\">Create account</Button>\n                                </Col>\n                            </Row>\n                            <br/>\n                        </Form>\n                    </Container>\n    )\n}\n\nexport default RegisterForm;","import React from 'react';\nimport {Nav, Button} from 'react-bootstrap';\nimport './navbar.css'\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    return(\n       <div id = 'navbar'>\n            <Nav defaultActiveKey=\"/home\" as=\"ul\">\n                <Nav.Item as=\"li\">\n                    <Nav.Link href=\"/home\" style={{color:'white'}}>WELCOME</Nav.Link>\n                </Nav.Item>\n                <Nav.Item as=\"li\" style = {{marginLeft: \"75em\"}}>\n                    <Link to = \"/Login\"><Button id = 'button'>Login</Button></Link>\n                </Nav.Item>\n            </Nav>\n       </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport './hometext.css'\nconst HomeText = () => {\n    return (\n        <div style={{height: '40%', width: '35%'}}>\n            <div id=\"homeMessage\">\n                <h1>Examen de front-end</h1>\n                <h2>Â¿Listo para empezar?</h2>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default HomeText;","import React , {useEffect, useState} from 'react'\nimport './userDashboard.css'\n \n const UserDashboard = () => {\n    const [Users, setUsers] = useState();\n\n    useEffect(() => {\n       fetch(\"https://reqres.in/api/users\")\n       .then(res => res.json())\n       .then(res => {setUsers(res.data)})\n        .catch(err => console.log(err))\n       }, [])\n \n    return (\n    <div id = 'userDashboard'>\n        <h1 id = 'users'>Users:</h1>\n\n        {\n            Users ? \n            Users.map(user => <li id='userCard' key = {user.id}>{user.email} </li>)\n        :\n            <h1>Users not found</h1>        \n        }\n        \n    </div>\n )\n}\n\nexport default UserDashboard","import React from 'react';\nimport './Home.css'\nimport RegisterForm from '../../components/register/register';\nimport { Container } from 'reactstrap';\nimport Navbar from '../../components/navbar/navbar';\nimport HomeMessage from '../../components/hometext/hometext';\nimport UserDashboard from '../userDashboard/userDashboard'\n\n\n const Home = ({setlogged, logged}) => {\n\n        return (\n\n            <div id=\"home\" style={{ backgroundSize: 'cover' }}>\n                <Navbar />\n                {logged ? \n                <UserDashboard/>\n                :\n                <Container style={{display: \"flex\", height: '97%', maxWidth: '100%', margin: \"0\", justifyContent: \"space-around\", alignItems: \"center\"}}>\n                            <HomeMessage id='colRegisterMessage' />\n                            <RegisterForm />\n                </Container>\n                \n                }\n            </div>\n        )\n}\n\nexport default Home;","import React , {useState} from 'react';\nimport './Login.css';\nimport { Button, Form, FormGroup, Label, Input, Container } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nconst Login = ({setLogged, history}) => {\n    const [email, setemail] = useState(\"\");\n    const [psw, setpsw] = useState(\"\");\n\n    const recordEmailChange = (e) => {\n        if (e.target.value !== email){\n            setemail(e.target.value)\n        }\n    }\n    const recordPswChange = (e) => {\n        if (e.target.value !== psw){\n            setpsw(e.target.value)\n        }\n    }\n\n    const formSubmit = () => {\n        if(!email || !psw){\n            alert(\"There are some missing fields\")\n            return;\n        }\n        const body = {\n            email, password:psw\n        }\n        fetch(\"https://reqres.in/api/register\", {\n            headers:{\n                    'Content-Type': 'application/json'\n            },\n            method:'POST',\n            body: JSON.stringify(body)\n        }).then(res => res.json())\n        .then(data => {\n            setLogged(data)\n            history.push(\"/\")\n            console.log(data)})\n        .catch(err => console.log(err));\n    }\n\n    return (\n        <div id=\"login\" style={{width: '50%', height: '700px'}}>\n            <Container id='containerLogin' style={{marginTop: '40px'}}>\n                <Form>\n                    <FormGroup>\n                        <Label for=\"usernameLogin\">Email</Label>\n                        <Input type=\"text\" value= {email} onChange={recordEmailChange} name=\"email\" id=\"usernameLogin\" placeholder=\"Enter your username or Email\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"passwordLogin\">Password</Label>\n                        <Input type=\"password\" value = {psw} name=\"psw\" onChange={recordPswChange} id=\"passwordLogin\" placeholder=\"Enter your password\" />\n                    </FormGroup>\n                    <Button color=\"primary\" onClick = {formSubmit} id=\"LoginButton\">Submit</Button>\n                </Form>\n            </Container>\n        </div>\n    )\n}\n\nexport default withRouter(Login);","import React from 'react';\nimport './LoginCon.css'\nimport { Container } from 'reactstrap';\nimport Login from '../../components/Login/Login';\n\nconst Home = ({setlogged}) => {\n        return (\n            <div id=\"Login\">\n                <Container style={{ display: \"flex\", height: '100%%', maxWidth: '100%', margin: \"0\", justifyContent: \"space-around\", alignItems: \"center\" }}>\n                    <Login id='Login' setLogged = {setlogged} />\n                </Container>\n            </div>\n        )\n    \n}\n\nexport default Home;","import React from 'react';\nimport {Button} from 'react-bootstrap';\nimport './logintext.css'\nimport { Link } from 'react-router-dom';\n\nconst LoginText = () => {\n    return (\n        <div style={{height: '40%', width: '35%'}}>\n            <div id=\"homeMessage\">\n                <p> Hola XXXXX Â¿Quieres borrar tu cuenta?</p>\n                <Link to = \"/\"><Button id = 'buttonErase'>Borrar Cuenta</Button></Link>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default LoginText;","import React, { Component } from 'react';\nimport './LoginScreen.css'\nimport LoginText from '../../components/logintext/logintext';\n\nexport default class LoginScreen extends Component {\n    render() {\n        return (\n            <div id=\"LoginScreen\">\n                    <LoginText/>\n            </div>\n        )\n    }\n}\n ","import React, {useState} from 'react';\nimport './App.css';\nimport Home from './containers/Home/Home';\nimport LoginCon from './containers/LoginForm/LoginCon';\nimport LoginScreen from './containers/LoginScreen/LoginScreen';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  const [logged, setlogged] = useState();\n\n  return (\n   <Router>\n      <Switch>\n          <Route exact path=\"/\" render={() => <Home setlogged ={setlogged} logged ={logged} />} />\n          <Route path=\"/login\" render={() => <LoginCon setlogged ={setlogged} logged ={logged}/>} />\n          <Route path=\"/loginText\" render={() => <LoginScreen />} />\n      </Switch>\n   </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}